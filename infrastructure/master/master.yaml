Description: >
  This template deploys a VPC, with a pair of public and database subnets spread
  across two Availability Zones. It deploys an Internet Gateway, with a default
  route on the public subnets.

Parameters:
  EnvironmentName:
    Type: String
    Description: Name of the environment
  SSHKey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Provide an SSH KeyName to allow SSH access to the instances
  HomeIp:
    Type: String
    Description: My IP
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  DBUser:
    Type: String
    Description: Database master user for RDS
    Default: postgres
    NoEcho: true
  DBPassword:
    Type: String
    Description: Password for database master user for RDS
    Default: postgres
    NoEcho: true
    MinLength: 1
    MaxLength: 41
  CloudformationBucket:
    Type: String
    Description: CloudFormation bucket name
    Default: https://eugene-ivanov-web-app-cloudformation-templates.s3.eu-west-2.amazonaws.com

Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [!Ref CloudformationBucket, "infrastructure", "vpc.yaml"]]
      Parameters:
        EnvironmentName:     !Ref EnvironmentName
        VPCBlock:            '10.0.0.0/16'
        VPCBlock2:           '192.0.0.0/16'
        PublicSubnetACidr:   '10.0.10.0/24'
        PublicSubnetBCidr:   '10.0.20.0/24'
        DatabaseSubnetACidr: '192.0.10.0/24'
        DatabaseSubnetBCidr: '192.0.20.0/24'

  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join [ "/", [ !Ref CloudformationBucket, "infrastructure", "security-groups.yaml" ] ]
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        VPC: !GetAtt VPC.Outputs.VPC
        BastionCidr: !Ref HomeIp

  RDS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["/", [!Ref CloudformationBucket, "infrastructure", "rds.yaml"]]
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        VPC: !GetAtt VPC.Outputs.VPC
        DBUser: !Ref DBUser
        DBPassword: !Ref DBPassword
        Subnets: !GetAtt VPC.Outputs.DatabaseSubnets
        CommonSecurityGroup: !GetAtt SecurityGroups.Outputs.CommonSecurityGroup

  PublicInstance:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join [ "/", [ !Ref CloudformationBucket, "infrastructure", "ec2.yaml" ] ]
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        ImageId: ami-0194c3e07668a7e36
        InstanceType: t2.micro
        Purpose: public
        Subnet: !GetAtt VPC.Outputs.PublicSubnetA
        SecurityGroup: !GetAtt SecurityGroups.Outputs.PublicInstanceSecurityGroup
        RdsEndpointUrl: !GetAtt RDS.Outputs.ImageHolderJDBCConnectionUrl
        CommonSecurityGroup: !GetAtt SecurityGroups.Outputs.CommonSecurityGroup
        SSHKey: !Ref SSHKey


Outputs:
  EnvironmentName:
    Description: Environment Name
    Value: !Ref EnvironmentName
    Export:
      Name: Environment-Name-master
  VpcId:
    Value: !GetAtt VPC.Outputs.VPC
    Export:
      Name: !Sub ${EnvironmentName}-VpcId-master
  VpcCidr1:
    Value: !GetAtt VPC.Outputs.VpcCidrBlock1
    Export:
      Name: !Sub ${EnvironmentName}-CIDR-1-master
  VpcCidr2:
    Value: !GetAtt VPC.Outputs.VpcCidrBlock2
    Export:
      Name: !Sub ${EnvironmentName}-CIDR-2-master


